// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"example.com/mod/webook/interactive/events"
	"example.com/mod/webook/interactive/ioc"
	"example.com/mod/webook/interactive/repository"
	"example.com/mod/webook/interactive/repository/cache"
	"example.com/mod/webook/interactive/repository/dao"
	"example.com/mod/webook/interactive/service"
	"example.com/mod/webook/interactive/webookgrpc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *App {
	db := ioc.InitDbB()
	interactiveDao := dao.NewInteractiveDao(db)
	cmdable := ioc.InitRedis()
	interactiveCache := cache.NewInteractiveCache(cmdable)
	interactiveRepository := repository.NewInteractiveRepository(interactiveDao, interactiveCache)
	serviceInteractiveService := service.NewInteractiveService(interactiveRepository)
	interactiveServiceServer := webookgrpc.NewInteractiveServiceServer(serviceInteractiveService)
	server := ioc.InitGRPCxServer(interactiveServiceServer)
	client := ioc.InitKafka()
	interactiveReadEventConsumer := events.NewInteractiveReadEventConsumer(client, interactiveRepository)
	v := ioc.NewConsumer(interactiveReadEventConsumer)
	app := &App{
		server:   server,
		consumer: v,
	}
	return app
}

// wire.go:

var interactiveService = wire.NewSet(dao.NewInteractiveDao, cache.NewInteractiveCache, repository.NewInteractiveRepository, service.NewInteractiveService)

// ioc.InitKafka 暂时
var thirdProvider = wire.NewSet(ioc.InitRedis, ioc.InitDbB, ioc.InitKafka, ioc.NewConsumer, ioc.InitGRPCxServer)

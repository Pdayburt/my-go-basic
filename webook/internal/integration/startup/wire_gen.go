// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	"example.com/mod/webook/internal/ioc"
	"example.com/mod/webook/internal/repository"
	"example.com/mod/webook/internal/repository/cache"
	"example.com/mod/webook/internal/repository/dao"
	"example.com/mod/webook/internal/service"
	"example.com/mod/webook/internal/web"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitWebServerByWire() *gin.Engine {
	v := ioc.InitMiddlewares()
	db := ioc.InitDbB()
	userDao := dao.NewUserDao(db)
	cmdable := ioc.InitRedis()
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDao, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService)
	articleDao := dao.NewArticleDao(db)
	articleRepository := repository.NewArticleRepository(articleDao)
	articleService := service.NewArticleService(articleRepository)
	articleHandler := web.NewArticleHandler(articleService)
	engine := ioc.InitGin(v, userHandler, articleHandler)
	return engine
}

func InitArticleHandler() *web.ArticleHandler {
	db := ioc.InitDbB()
	articleDao := dao.NewArticleDao(db)
	articleRepository := repository.NewArticleRepository(articleDao)
	articleService := service.NewArticleService(articleRepository)
	articleHandler := web.NewArticleHandler(articleService)
	return articleHandler
}

// wire.go:

var thirdPart = wire.NewSet(ioc.InitDbB, ioc.InitRedis, ioc.InitSMService)
